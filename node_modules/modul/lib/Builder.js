module.exports = Builder;
var  CommandBus = require("./CommandBus"), 
	   ServiceBus = require("./ServiceBus"),
	   EventBus = require("./EventBus"),
	   AggreProto = require("./AggreProto"),
	   util  =  require("util");

function Builder(){

	var AggreTypes  = this._AggreTypes = {};
	this._db = null;
	var proxy = {}
	var serviceBus = this._serviceBus = new ServiceBus(proxy);
	
	proxy.$service = function(){
			serviceBus.exec(arguments);	
	}
	
	proxy.$getAggreType = function(name){
			var T = AggreTypes[name];
			return T;
	}

	this.eventBus = new EventBus(proxy);
	this.commandBus = new CommandBus(proxy);
	
}

Builder.prototype = {

	bindService:function(name,service){
		this._serviceBus.bind(name,service);
		return this;
	},
	
	bindAggreType:function(typeName,init,methods){

		var T = function(data) {
			if (data.__in__) {
				delete data.__in__;
				AggreProto.call(this,data);
			} else {
				AggreProto.call(this, init(data));
			}
		}
		
		if(this._db){
			T._db = this._db;
		}
		T.get = AggreProto.get;
		T._cache = {}
		T.typeName = typeName;
		
		util.inherits(T,AggreProto);
		T.prototype._AggreTypes = this._AggreTypes;
		T.prototype._serviceBus = this._serviceBus;
		T.prototype._eventBus = this.eventBus;
		
		for (var k in methods) {
			T.prototype[k] = methods[k];
		}
		
		this._AggreTypes[typeName] = T;
				
		return this;
		
	},
	bindCommandHandle:function(name,commandHandle){
		this.commandBus.bind(name,commandHandle);
		return this;
	},
	bindEventHandle:function(){
		this.eventBus._on.apply(this.eventBus,arguments)
		return this;
	},
	bindDB:function(db){
		this._db = db;
		for(var k in this._AggreTypes){
			this._AggreTypes[k]._db = db;
		}
		return this;
	}
}